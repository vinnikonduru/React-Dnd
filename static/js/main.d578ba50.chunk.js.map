{"version":3,"sources":["Components/Draggable.js","App.js","serviceWorker.js","index.js"],"names":["Draggable","props","state","firstItems","secondItems","selectedIndexes","_selectHandler","bind","_dragOverHandler","_dropHandler","_dragEndHandler","event","classList","target","indexValue","parseInt","getAttribute","contains","remove","add","this","indexOf","indexes","filter","value","index","setState","newIndexes","concat","preventDefault","length","dropList","item","newItems","itemIndex","secondList","sourceIndex","dragItemText","textContent","newFirstItems","listOne","map","divClass","classNames","className","draggable","id","key","onClick","onDragEnd","style","cursor","width","paddingBottom","paddingTop","backgroundColor","textAlign","marginBottom","border","listStyleType","margin","padding","overflowY","height","listTwo","display","gridTemplateColumns","onDragOver","onDrop","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d578ba50.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Draggable.css';\nimport classNames from 'classnames';\n\nclass Draggable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            firstItems: [\n                'Exam 1', 'Exam 2', 'Exam 3', 'Exam 4', 'Exam 5', 'Exam 6', 'Exam 7', 'Exam 8', 'Exam 9'\n            ],\n            secondItems: [],\n            selectedIndexes: []\n        }\n        this._selectHandler = this._selectHandler.bind(this);\n        this._dragOverHandler = this._dragOverHandler.bind(this);\n        this._dropHandler = this._dropHandler.bind(this);\n        this._dragEndHandler = this._dragEndHandler.bind(this);\n    }\n    _selectHandler(event) {\n        const classList = event.target.classList;\n        const indexValue = parseInt(event.target.getAttribute('index'));\n        if (classList.contains(\"active\")) {\n            classList.remove(\"active\");\n        }\n        else {\n            classList.add(\"active\");\n        }\n        if (this.state.selectedIndexes.indexOf(indexValue) > -1) {\n            let indexes = this.state.selectedIndexes.filter((value, index) => {\n                return value != indexValue;\n\n            });\n            this.setState({ selectedIndexes: indexes });\n        }\n        else {\n            const newIndexes = this.state.selectedIndexes.concat(indexValue);\n            this.setState({ selectedIndexes: newIndexes });\n        }\n    }\n    _dragOverHandler(event) {\n        event.preventDefault();\n    }\n    _dropHandler(event) {\n        event.preventDefault();\n    }\n    _dragEndHandler(event) {\n        if (this.state.selectedIndexes.length > 0) {\n            const dropList = this.state.firstItems.filter((item, index) => (\n                this.state.selectedIndexes.indexOf(index) > -1\n            ));\n            const newItems = this.state.firstItems.filter((item, index) => {\n                const itemIndex = this.state.firstItems.indexOf(item);\n                return !(this.state.selectedIndexes.indexOf(itemIndex) > -1)\n            });\n            const secondList = [...this.state.secondItems];\n            this.setState({ secondItems: secondList.concat(dropList), firstItems: newItems, selectedIndexes: [] });\n        }\n        else {\n            const sourceIndex = event.target.getAttribute('index');\n            const dragItemText = event.target.textContent;\n            const newFirstItems = this.state.firstItems.filter((item, index) => {\n                return sourceIndex != index\n            });\n            const secondList = [...this.state.secondItems];\n            this.setState({ secondItems: secondList.concat(dragItemText), firstItems: newFirstItems });\n        }\n    }\n\n    render() {\n        const listOne = this.state.firstItems.map((item, index) => {\n            var divClass = classNames({\n                'list-group-item-drag-drop': true,\n                'active': this.state.selectedIndexes.indexOf(index) > -1,\n            });\n        \n                return <li\n                                className={divClass}\n                                draggable=\"true\"\n                                id={index}\n                                index={index}\n                                key={index}\n                                onClick={this._selectHandler}\n                                onDragEnd={this._dragEndHandler}\n                                style={{ cursor: 'pointer',    \n                                         width: '200px',\n                                         paddingBottom: '5px',\n                                         paddingTop: '5px',\n                                         backgroundColor: 'White',\n                                         textAlign: 'center',\n                                         marginBottom: '20px' ,\n                                         border:'1px solid black',\n                                         listStyleType:'none',\n                            }}>\n                                {item}\n                       </li>\n\n\n        })\n        var style = {\n            margin: '10px',\n            padding: '10px',\n            overflowY: 'auto',\n            border: '3px solid black',\n            backgroundColor: 'cornsilk',\n            width: '400px',\n            height: '500px',\n            listStyleType:'none'\n\n        }\n        const listTwo = this.state.secondItems.map((item, index) => (\n            \n                <li\n                    className=\"list-group-item-drag-drop\"\n                    id={index}\n                    index={index}\n                    key={index}\n                    style={{style}}\n                    >\n                    {item}\n                    \n                </li>\n\n        ));\n       \n        return (\n            <div className=\"drag-drop-container-wrapper\"\n                style={{\n                    backgroundColor: 'white',\n                    border: '2px solid black'\n                }} >\n                <div className=\"drag-drop-container\">\n                    <div className=\"grid\"\n                        style={{\n                            display: 'grid',\n                            gridTemplateColumns: '1fr 1fr 1fr'\n                        }} >\n\n                        <div className=\"list-left-items-container\"\n                            id=\"div1\"\n                            style={style}\n                            >\n                          \n                            <h4>Multi Dragabble List</h4>\n\n                            <p>Accessibility - Mouse selection</p>\n                            <ul className=\"list-group-left\"\n                                id=\"left-list\">\n                                {listOne}\n                            </ul>\n                        </div>\n                        <div className=\"drop-container-list\"\n                            id=\"div2\"\n                            style={style}\n                            onDragOver={this._dragOverHandler}\n                            onDrop={this._dropHandler}>\n                            <div>\n                                <h4>\n                                    Drop Target container \n                                </h4>\n                                   \n                               {listTwo}\n                            </div>\n\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n\n}\n\nexport default Draggable;\n\n\n\n\n\n\n","import React from 'react';\nimport './App.css';\nimport Draggable from \"./Components/Draggable\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       <Draggable/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}